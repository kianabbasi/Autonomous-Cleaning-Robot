/** 
  Mapping Algorithm uses 
  left and right ultrasonic
  sensors to detect obstacles 
  and edges and map them onto 
  a 2D matrix so that the object
  can efficiently navigate through 
  a 2D surface. Created by Kian Abbasi
  2024/04/01
  **/

#include <AFMotor.h>
#include <NewPing.h>
#include <SoftwareSerial.h>

#define TRIG_PIN A0
#define ECHO_PIN A1
#define TRIG_PIN_LEFT A2
#define ECHO_PIN_LEFT A3
#define TRIG_PIN_RIGHT A4
#define ECHO_PIN_RIGHT A5
#define MAX_DISTANCE 300


const int L = 30, W = 30;

const char u = 'u'; //unknown
const char p = 'p'; //path
const char o = 'o'; //obstacle

char room[L][W];

int x = 15;
int y = 15;

bool reachedEdge = false;

bool sonarFinished = 0;

char orientation[4] = {'f', 'r', 'b', 'l'};

AF_DCMotor motor1(1, MOTOR12_1KHZ);
AF_DCMotor motor2(2, MOTOR12_1KHZ);
AF_DCMotor motor3(3, MOTOR12_1KHZ);
AF_DCMotor motor4(4, MOTOR12_1KHZ);


NewPing sonar(TRIG_PIN, ECHO_PIN, MAX_DISTANCE);
NewPing sonarRight(TRIG_PIN_RIGHT, ECHO_PIN_RIGHT, MAX_DISTANCE);
NewPing sonarLeft(TRIG_PIN_LEFT, ECHO_PIN_LEFT, MAX_DISTANCE);


bool reachedEdge = false;
int orientation = 0;
int started = 0;
int speed = 0;

SoftwareSerial BTSerial(11,10);

void setup() {
  // put your setup code here, to run once:
  Serial.begin(9600);
  BTSerial.begin(9600);
  motor1.setSpeed(200);
  motor2.setSpeed(200);
  motor3.setSpeed(200);
  motor4.setSpeed(200);

  
  for (int i = 0; i < L; i++){
    for (int j = 0; j < W; j++){
      room[i][j] = u;
    }
  }
  
  room[x][y] = p;



}

void loop() {
   if(checkData() == 1){
    Serial.print("s");
    started = 1;
  }

  if(started == 1){
  if (x == 0 || y == 0 || x == L || y == W){
    Serial.println("Robot outside of room!");
    shutDown();
  }

  if (isDone() != 1){
    sonarFinished = 0;
    Scout();

    if (sonarFinished == 1){
      move();
    }
  }
  else {
    Serial.println("Room has been explored");
    PrintMap();
  }
  }
}



float readPing(){
  delay(70);
  unsigned int uS = sonar.ping();
  float distance = uS/57.0;
  return distance;
}

void checkEdge (){
  delay(70);
  unsigned int uS1 = sonarLeft.ping();
  float leftDistance = uS1/57;
  delay(70);
  unsigned int uS2 = sonarRight.ping();
  float rightDistance = uS2/57;

  if (leftDistance > 10 || rightDistance > 10){ //reached edge
      room[x-1][y] = 'o'; //marks forward unit as edge
      reachedEdge = true;
  }
  else {
    reachedEdge = false;
  }

}



char checkSonar(char direction){
  float distance;
  float maxRange = 20; //cm

  if (direction == 'f') {
    distance = readPing();
  }
  else if (direction == 'r'){
    turnRight();
    distance = readPing();
    delay(200);
    turnLeft();
  }
  else if (direction == 'b') {
    turnRight();
    turnRight();
    distance = readPing();
    delay(200);
    turnLeft();
    turnLeft();
  }
  else if (direction == 'l'){
    turnLeft();
    distance = readPing();
    delay(200);
    turnRight();
  }

  if (distance > maxRange){  //object far away
      return 'p';
    }
  else {
      return 'o';
    }

}

void Scout () {
  
  if (room[x-1][y] == u){
    room[x-1][y] = checkSonar(orientation[0]);
  }
  else if (room[x][y+1] == u){
    room[x][y+1] = checkSonar(orientation[1]);
  }
  else if (room[x+1][y] == u){
    room[x+1][y] = checkSonar(orientation[2]);
  }
  else if (room[x][y-1] == u){
    room[x][y-1] = checkSonar(orientation[3]);
  }

  sonarFinished = 1;

}

void orientRight (){
  char temp = orientation[3];
  for (int i = 3; i >= 0; i--){
    orientation[i] = orientation[i-1];
  }
  orientation[0] = temp;
}

void orientLeft (){
  char temp = orientation[0];
  for (int i = 0; i < 4; i++){
    orientation[i] = orientation[i+1];
  }
  orientation[3] = temp;
}

boolean isDone (){
  for (int i = 0; i < L; i++){
    for (int j = 0; j < W; j++){
      
      if (room[i][j] == p){
        if (room[i-1][j] == u){
          return 0;
        }
        else if (room[i][j+1] == u){
          return 0;
        }
        else if (room[i+1][j] == u){
          return 0;
        }
        else if (room[i][j-1] == u){
          return 0;
        }
      }
    }
  }

  return 1;
}

void move (){

  if (room[x-1][y] == p){
    turn(orientation[0]);
    if (reachedEdge == false){
        x--;
    }
    
  }
  else if (room[x][y+1] == p){
    turn(orientation[1]);
    if (reachedEdge == false){
    y++;
    }
  }
  else if (room[x+1][y] == p){
    turn(orientation[2]);
    if (reachedEdge == false){
    x++;
    }
  }
  else if (room[x][y-1] == p){
    turn(orientation[3]);
    if (reachedEdge == false){
    y--;
    }
  }
  else {
    Serial.println("Nowhere to travel!");
    die();
  }


  
}

void turn (char rotation){

  if (rotation == 'f'){
    moveForward();
  }
  else if (rotation == 'r'){
    turnRight();
    moveForward();
    orientRight();
  }
  else if (rotation == 'b'){
    turnRight();
    turnRight();
    moveForward();
    orientRight();
    orientRight();
  }
  else if (rotation == 'l'){
    turnLeft();
    moveForward();
    orientLeft();
  }

}

int moveForward (int time){
  for (int i = 0; i < time){
    checkEdge();
    if (reachedEdge == false){
      motor1.run(FORWARD);
      motor2.run(FORWARD);
      motor3.run(FORWARD);
      motor4.run(FORWARD);
      delay(10);
    }
    else {
      brake();
      moveBackward(i*10)
      return 0;
    }
    
  }
  // motor1.run(FORWARD);
  // motor2.run(FORWARD);
  // motor3.run(FORWARD);
  // motor4.run(FORWARD);
  // delay(500); //one unit of movement
  // brake();
}

void moveBackward (){
  motor1.run(BACKWARD);
  motor2.run(BACKWARD);
  motor3.run(BACKWARD);
  motor4.run(BACKWARD);
  delay(500);
  brake();
}

void turnLeft (){
  motor1.run(FORWARD);
  motor4.run(FORWARD);
  motor2.run(BACKWARD);
  motor3.run(BACKWARD);
  delay(1000);
  brake();
}

void turnRight (){
  motor2.run(FORWARD);
  motor3.run(FORWARD);
  motor1.run(BACKWARD);
  motor4.run(BACKWARD);
  delay(1000);
  brake();
}

void brake () {
  motor1.run(RELEASE);
  motor2.run(RELEASE);
  motor3.run(RELEASE);
  motor4.run(RELEASE);
  delay(500);

}

void PrintMap()
{   
  Serial.println("");
  Serial.println("Map of explored room:");
  Serial.println("");
  for (int i=0; i<L; i++)
  {
    Serial.println("");
    for (int j=0; j<W; j++)
    {
      Serial.print(room[i][j]);
    }
  }
   Serial.println("");
   Serial.println("");
}

void die () {
  brake();
  delay(999999999);

}


int checkData(){
  if(BTSerial.available() > 0){
    byte receivedData = BTSerial.read();
    Serial.print(int(receivedData));

    return int(receivedData);
  }
  return 0;
}
