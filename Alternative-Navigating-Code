/**
  This code deploys a more
  basic approach to navigation
  as it does not deploy a 2D mapping
  array. However, it uses much less power
  and is more efficient for basic purposes.
**/


#include <AFMotor.h>
#include <NewPing.h>
#include <SoftwareSerial.h>

#define TRIG_PIN A0
#define ECHO_PIN A1
#define TRIG_PIN_LEFT A2
#define ECHO_PIN_LEFT A3
#define TRIG_PIN_RIGHT A4
#define ECHO_PIN_RIGHT A5
#define MAX_DISTANCE 300

AF_DCMotor motor1(1, MOTOR12_1KHZ);
AF_DCMotor motor2(2, MOTOR12_1KHZ);
AF_DCMotor motor3(3, MOTOR12_1KHZ);
AF_DCMotor motor4(4, MOTOR12_1KHZ);

bool reachedEdge = false;
NewPing sonarRight(TRIG_PIN_RIGHT, ECHO_PIN_RIGHT, MAX_DISTANCE);
NewPing sonarLeft(TRIG_PIN_LEFT, ECHO_PIN_LEFT, MAX_DISTANCE);
int orientation = 0;
int started = 0;
int speed = 0;

SoftwareSerial BTSerial(11,10);

void setup() {
  // put your setup code here, to run once:
  Serial.begin(9600);
  BTSerial.begin(9600);

  motor1.setSpeed(80);
  motor2.setSpeed(80);
  motor3.setSpeed(80);
  motor4.setSpeed(80);

}

void loop() {
  // put your main code here, to run repeatedly:

  if(checkData() == 1){
    Serial.print("s");
    started = 1;
  }

  if(started == 1){
    
  moveForward(10000);
  if (started != 0){
    
  }

    if (orientation%2 == 0){
      delay(200);
      turnRight();
      delay(200);
      moveForward(700);
      delay(200);
      turnRight();
    }
    else{
      delay(200);
      turnLeft();
      delay(200);
      moveForward(700);
      delay(200);
      turnLeft();
    }

    orientation++;
  }
 }

void checkEdge (){ //gets distance from bottom 2 sensors 
  delay(70);
  unsigned int uS1 = sonarLeft.ping();
  float leftDistance = uS1/57;
  unsigned int uS2 = sonarRight.ping();
  float rightDistance = uS2/57;

  if (leftDistance > 10 || rightDistance > 10){ //reached edge
      reachedEdge = true;
  }
  else {
    reachedEdge = false;
  }

}

void moveForward (int time){
   if(checkData() == 2){
      Serial.print("tet");
      started = 0;
      brake();
      break;
    }

    motor1.setSpeed(80);
    motor2.setSpeed(80);
    motor3.setSpeed(80);
    motor4.setSpeed(80);
    delay(100);
    unsigned long timeStart = millis();
    const unsigned long timeUp = time;
  while ((millis() - timeStart) < timeUp){

    if(checkData() == 2){
      Serial.print("tet");
      started = 0;
      brake();
      break;
    }

    checkEdge();
    Serial.println(reachedEdge);
    if (reachedEdge == false){
      delay(5);
      motor1.run(FORWARD);
      motor2.run(FORWARD);
      motor3.run(FORWARD);
      motor4.run(FORWARD);
      if(checkData() == 2){
      Serial.print("tet");
      started = 0;
      brake();
      break;
    }
    }
    else {
      brake();
      moveBackward(500);
      break;
    }
    
  }
  brake();
}

void moveBackward (int time){
  if(checkData() == 2){
      Serial.print("tet");
      started = 0;
      brake();
      break;
    }
  motor1.setSpeed(180);
  motor2.setSpeed(180);
  motor3.setSpeed(180);
  motor4.setSpeed(180);

  unsigned long timeStart = millis();
  const unsigned long timeUp = time;
  while ((millis() - timeStart) < timeUp){

  motor1.run(BACKWARD);
  motor2.run(BACKWARD);
  motor3.run(BACKWARD);
  motor4.run(BACKWARD);
  }
  brake();
}

void turnLeft (){
  if(checkData() == 2){
      Serial.print("tet");
      started = 0;
      brake();
      break;
    }
  for (speed = 0; speed < 180; speed +=2) // slowly bring the speed up to avoid loading down the batteries too quickly
   {
    motor1.setSpeed(speed);
    motor2.setSpeed(speed);
    motor3.setSpeed(speed);
    motor4.setSpeed(speed);
    delay(5);
   }
  unsigned long timeStart = millis();
  const unsigned long timeUp = 650;
  while ((millis() - timeStart) < timeUp){
  motor1.run(FORWARD);
  motor4.run(FORWARD);
  motor2.run(BACKWARD);
  motor3.run(BACKWARD);
  }
  brake();
}

void turnRight (){
  if(checkData() == 2){
      Serial.print("tet");
      started = 0;
      brake();
      break;
    }
  for (speed = 0; speed < 180; speed +=2) // slowly bring the speed up to avoid loading down the batteries too quickly
   {
    motor1.setSpeed(speed);
    motor2.setSpeed(speed);
    motor3.setSpeed(speed);
    motor4.setSpeed(speed);
    delay(5);
   }
   unsigned long timeStart = millis();
  const unsigned long timeUp = 650;
  while ((millis() - timeStart) < timeUp){
  motor2.run(FORWARD);
  motor3.run(FORWARD);
  motor1.run(BACKWARD);
  motor4.run(BACKWARD);
  }
  brake();
}

void brake () {
  delay(50);
  motor1.run(RELEASE);
  motor2.run(RELEASE);
  motor3.run(RELEASE);
  motor4.run(RELEASE);
  delay(50);

}

int checkData(){
  if(BTSerial.available() > 0){
    byte receivedData = BTSerial.read();
    Serial.print(int(receivedData));

    return int(receivedData);
  }
  return 0;
}
